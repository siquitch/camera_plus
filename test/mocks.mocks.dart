// Mocks generated by Mockito 5.4.6 from annotations
// in camra/test/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;
import 'dart:convert' as _i10;
import 'dart:typed_data' as _i11;
import 'dart:ui' as _i8;

import 'package:camera/camera.dart' as _i3;
import 'package:camera_platform_interface/camera_platform_interface.dart'
    as _i2;
import 'package:flutter/foundation.dart' as _i5;
import 'package:flutter/material.dart' as _i4;
import 'package:flutter/services.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMediaSettings_0 extends _i1.SmartFake implements _i2.MediaSettings {
  _FakeMediaSettings_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCameraDescription_1 extends _i1.SmartFake
    implements _i2.CameraDescription {
  _FakeCameraDescription_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCameraValue_2 extends _i1.SmartFake implements _i3.CameraValue {
  _FakeCameraValue_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeXFile_3 extends _i1.SmartFake implements _i2.XFile {
  _FakeXFile_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeWidget_4 extends _i1.SmartFake implements _i4.Widget {
  _FakeWidget_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);

  @override
  String toString({_i5.DiagnosticLevel? minLevel = _i5.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeDateTime_5 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [CameraDescription].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockCameraDescription extends _i1.Mock implements _i2.CameraDescription {
  MockCameraDescription() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get name =>
      (super.noSuchMethod(
            Invocation.getter(#name),
            returnValue: _i6.dummyValue<String>(this, Invocation.getter(#name)),
          )
          as String);

  @override
  _i2.CameraLensDirection get lensDirection =>
      (super.noSuchMethod(
            Invocation.getter(#lensDirection),
            returnValue: _i2.CameraLensDirection.front,
          )
          as _i2.CameraLensDirection);

  @override
  int get sensorOrientation =>
      (super.noSuchMethod(Invocation.getter(#sensorOrientation), returnValue: 0)
          as int);

  @override
  _i2.CameraLensType get lensType =>
      (super.noSuchMethod(
            Invocation.getter(#lensType),
            returnValue: _i2.CameraLensType.wide,
          )
          as _i2.CameraLensType);
}

/// A class which mocks [CameraController].
///
/// See the documentation for Mockito's code generation for more information.
class MockCameraController extends _i1.Mock implements _i3.CameraController {
  MockCameraController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MediaSettings get mediaSettings =>
      (super.noSuchMethod(
            Invocation.getter(#mediaSettings),
            returnValue: _FakeMediaSettings_0(
              this,
              Invocation.getter(#mediaSettings),
            ),
          )
          as _i2.MediaSettings);

  @override
  _i2.CameraDescription get description =>
      (super.noSuchMethod(
            Invocation.getter(#description),
            returnValue: _FakeCameraDescription_1(
              this,
              Invocation.getter(#description),
            ),
          )
          as _i2.CameraDescription);

  @override
  _i2.ResolutionPreset get resolutionPreset =>
      (super.noSuchMethod(
            Invocation.getter(#resolutionPreset),
            returnValue: _i2.ResolutionPreset.low,
          )
          as _i2.ResolutionPreset);

  @override
  bool get enableAudio =>
      (super.noSuchMethod(Invocation.getter(#enableAudio), returnValue: false)
          as bool);

  @override
  int get cameraId =>
      (super.noSuchMethod(Invocation.getter(#cameraId), returnValue: 0) as int);

  @override
  _i3.CameraValue get value =>
      (super.noSuchMethod(
            Invocation.getter(#value),
            returnValue: _FakeCameraValue_2(this, Invocation.getter(#value)),
          )
          as _i3.CameraValue);

  @override
  set value(_i3.CameraValue? newValue) => super.noSuchMethod(
    Invocation.setter(#value, newValue),
    returnValueForMissingStub: null,
  );

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  void debugCheckIsDisposed() => super.noSuchMethod(
    Invocation.method(#debugCheckIsDisposed, []),
    returnValueForMissingStub: null,
  );

  @override
  _i7.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> prepareForVideoRecording() =>
      (super.noSuchMethod(
            Invocation.method(#prepareForVideoRecording, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> pausePreview() =>
      (super.noSuchMethod(
            Invocation.method(#pausePreview, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> resumePreview() =>
      (super.noSuchMethod(
            Invocation.method(#resumePreview, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> setDescription(_i2.CameraDescription? description) =>
      (super.noSuchMethod(
            Invocation.method(#setDescription, [description]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<_i2.XFile> takePicture() =>
      (super.noSuchMethod(
            Invocation.method(#takePicture, []),
            returnValue: _i7.Future<_i2.XFile>.value(
              _FakeXFile_3(this, Invocation.method(#takePicture, [])),
            ),
          )
          as _i7.Future<_i2.XFile>);

  @override
  _i7.Future<void> startImageStream(_i3.onLatestImageAvailable? onAvailable) =>
      (super.noSuchMethod(
            Invocation.method(#startImageStream, [onAvailable]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> stopImageStream() =>
      (super.noSuchMethod(
            Invocation.method(#stopImageStream, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> startVideoRecording({
    _i3.onLatestImageAvailable? onAvailable,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#startVideoRecording, [], {
              #onAvailable: onAvailable,
            }),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<_i2.XFile> stopVideoRecording() =>
      (super.noSuchMethod(
            Invocation.method(#stopVideoRecording, []),
            returnValue: _i7.Future<_i2.XFile>.value(
              _FakeXFile_3(this, Invocation.method(#stopVideoRecording, [])),
            ),
          )
          as _i7.Future<_i2.XFile>);

  @override
  _i7.Future<void> pauseVideoRecording() =>
      (super.noSuchMethod(
            Invocation.method(#pauseVideoRecording, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> resumeVideoRecording() =>
      (super.noSuchMethod(
            Invocation.method(#resumeVideoRecording, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i4.Widget buildPreview() =>
      (super.noSuchMethod(
            Invocation.method(#buildPreview, []),
            returnValue: _FakeWidget_4(
              this,
              Invocation.method(#buildPreview, []),
            ),
          )
          as _i4.Widget);

  @override
  _i7.Future<double> getMaxZoomLevel() =>
      (super.noSuchMethod(
            Invocation.method(#getMaxZoomLevel, []),
            returnValue: _i7.Future<double>.value(0.0),
          )
          as _i7.Future<double>);

  @override
  _i7.Future<double> getMinZoomLevel() =>
      (super.noSuchMethod(
            Invocation.method(#getMinZoomLevel, []),
            returnValue: _i7.Future<double>.value(0.0),
          )
          as _i7.Future<double>);

  @override
  _i7.Future<void> setZoomLevel(double? zoom) =>
      (super.noSuchMethod(
            Invocation.method(#setZoomLevel, [zoom]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> setFlashMode(_i2.FlashMode? mode) =>
      (super.noSuchMethod(
            Invocation.method(#setFlashMode, [mode]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> setExposureMode(_i2.ExposureMode? mode) =>
      (super.noSuchMethod(
            Invocation.method(#setExposureMode, [mode]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> setExposurePoint(_i8.Offset? point) =>
      (super.noSuchMethod(
            Invocation.method(#setExposurePoint, [point]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<double> getMinExposureOffset() =>
      (super.noSuchMethod(
            Invocation.method(#getMinExposureOffset, []),
            returnValue: _i7.Future<double>.value(0.0),
          )
          as _i7.Future<double>);

  @override
  _i7.Future<double> getMaxExposureOffset() =>
      (super.noSuchMethod(
            Invocation.method(#getMaxExposureOffset, []),
            returnValue: _i7.Future<double>.value(0.0),
          )
          as _i7.Future<double>);

  @override
  _i7.Future<double> getExposureOffsetStepSize() =>
      (super.noSuchMethod(
            Invocation.method(#getExposureOffsetStepSize, []),
            returnValue: _i7.Future<double>.value(0.0),
          )
          as _i7.Future<double>);

  @override
  _i7.Future<double> setExposureOffset(double? offset) =>
      (super.noSuchMethod(
            Invocation.method(#setExposureOffset, [offset]),
            returnValue: _i7.Future<double>.value(0.0),
          )
          as _i7.Future<double>);

  @override
  _i7.Future<void> lockCaptureOrientation([
    _i9.DeviceOrientation? orientation,
  ]) =>
      (super.noSuchMethod(
            Invocation.method(#lockCaptureOrientation, [orientation]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> setFocusMode(_i2.FocusMode? mode) =>
      (super.noSuchMethod(
            Invocation.method(#setFocusMode, [mode]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> unlockCaptureOrientation() =>
      (super.noSuchMethod(
            Invocation.method(#unlockCaptureOrientation, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> setFocusPoint(_i8.Offset? point) =>
      (super.noSuchMethod(
            Invocation.method(#setFocusPoint, [point]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  bool supportsImageStreaming() =>
      (super.noSuchMethod(
            Invocation.method(#supportsImageStreaming, []),
            returnValue: false,
          )
          as bool);

  @override
  _i7.Future<void> dispose() =>
      (super.noSuchMethod(
            Invocation.method(#dispose, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  void removeListener(_i8.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void addListener(_i8.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [XFile].
///
/// See the documentation for Mockito's code generation for more information.
class MockXFile extends _i1.Mock implements _i2.XFile {
  MockXFile() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get path =>
      (super.noSuchMethod(
            Invocation.getter(#path),
            returnValue: _i6.dummyValue<String>(this, Invocation.getter(#path)),
          )
          as String);

  @override
  String get name =>
      (super.noSuchMethod(
            Invocation.getter(#name),
            returnValue: _i6.dummyValue<String>(this, Invocation.getter(#name)),
          )
          as String);

  @override
  _i7.Future<void> saveTo(String? path) =>
      (super.noSuchMethod(
            Invocation.method(#saveTo, [path]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<int> length() =>
      (super.noSuchMethod(
            Invocation.method(#length, []),
            returnValue: _i7.Future<int>.value(0),
          )
          as _i7.Future<int>);

  @override
  _i7.Future<String> readAsString({
    _i10.Encoding? encoding = const _i10.Utf8Codec(),
  }) =>
      (super.noSuchMethod(
            Invocation.method(#readAsString, [], {#encoding: encoding}),
            returnValue: _i7.Future<String>.value(
              _i6.dummyValue<String>(
                this,
                Invocation.method(#readAsString, [], {#encoding: encoding}),
              ),
            ),
          )
          as _i7.Future<String>);

  @override
  _i7.Future<_i11.Uint8List> readAsBytes() =>
      (super.noSuchMethod(
            Invocation.method(#readAsBytes, []),
            returnValue: _i7.Future<_i11.Uint8List>.value(_i11.Uint8List(0)),
          )
          as _i7.Future<_i11.Uint8List>);

  @override
  _i7.Stream<_i11.Uint8List> openRead([int? start, int? end]) =>
      (super.noSuchMethod(
            Invocation.method(#openRead, [start, end]),
            returnValue: _i7.Stream<_i11.Uint8List>.empty(),
          )
          as _i7.Stream<_i11.Uint8List>);

  @override
  _i7.Future<DateTime> lastModified() =>
      (super.noSuchMethod(
            Invocation.method(#lastModified, []),
            returnValue: _i7.Future<DateTime>.value(
              _FakeDateTime_5(this, Invocation.method(#lastModified, [])),
            ),
          )
          as _i7.Future<DateTime>);
}
